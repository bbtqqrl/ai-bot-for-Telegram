from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards import inline, builders
import os
from data.db import Database
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from main import bot
from data import bot_func
from data.bot_func import language_voices
from handlers.bot_message import VoiceRecognition, VoiceLanguageInGeneration

db = Database()
router = Router()

@router.callback_query(F.data.in_(['ua', 'eng', 'ru']))
async def handle_pagination(callback_query: CallbackQuery):
    try:
        text_language_dict = {
            'ua': '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–±—Ä–∞–ª–∏ –º–æ–≤—É üìö‚úÖ',
            'eng': 'You have successfully selected the language. üìö‚úÖ',
            'ru': '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫ üìö‚úÖ'
        }
        kb = builders.main_kb(callback_query.data)
        db.update_language(callback_query.from_user.id, callback_query.data)
        await callback_query.message.delete()
        await bot.send_message(chat_id=callback_query.from_user.id,text=text_language_dict[callback_query.data],reply_markup=kb)

    except Exception as e:
        print(e)
        await callback_query.answer("‚ùå Error processing request.")
        await callback_query.message.delete()

@router.callback_query(F.data.in_(['yes', 'no']))
async def handle_pagination(callback_query: CallbackQuery):
    chat_id = callback_query.from_user.id
    try:
        language = db.get_language(chat_id)
        if callback_query.data == 'no':
            text_language_dict = {
                'ua': '–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—èüö´',
                'eng': 'You refused to generate the imageüö´',
                'ru': '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüö´'
            }
            await callback_query.answer(text_language_dict[language])
            await callback_query.message.delete()
        else:
            text_language_dict = {
                'ua': '<b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è </b>ü™Ñüñº',
                'eng': '<b>Image Generation </b>ü™Ñüñº',
                'ru': '<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è </b>ü™Ñüñº'
            }
            await callback_query.message.delete()
            db.update_count_generation(chat_id)
            await bot.send_message(chat_id=chat_id,text=text_language_dict[language])
            image_path = await bot_func.generate_image(db.get_image_prompt(chat_id))
            photo = FSInputFile(image_path)
            await bot.send_photo(chat_id=chat_id, photo=photo)
            await bot.send_message(chat_id=chat_id,text=f"<b>Prompt</b> : <code>{db.get_image_prompt(chat_id)}</code>")
            os.remove(image_path)
    except Exception as e:
        print(e)
        await callback_query.answer("‚ùå All free image generation used. Try again later")

@router.callback_query(F.data.in_(['yes_generation', 'no_generation']))
async def handle_pagination(callback_query: CallbackQuery):
    language = db.get_language(callback_query.from_user.id)
    text_changes = {
        'ua': '–ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!',
        'eng': 'Changes applied successfully!',
        'ru': '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'
    }
    text_language_dict = {
        "yes_generation" :
            {"eng": f"Your prompt will be optimized using AI. ü§ñ\n\nYou can write your query in any way or record it by voice. üéôÔ∏è\nThe main thing is the meaning, and AI will improve the description for the best result! üöÄ\n\nGood luck to you! üçÄ",
            "ru": f"–í–∞—à –ø—Ä–æ–º—Ç –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò. ü§ñ\n\n–ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ª—é–±–æ–π –∑–∞–ø–∏—Å—å—é –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º. üéôÔ∏è\n–ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–º—ã—Å–ª, –∞ –ò–ò —É–ª—É—á—à–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞! üöÄ\n\n–£–¥–∞—á–∏ –≤–∞–º! üçÄ",
            "ua": f"–í–∞—à –ø—Ä–æ–º—Ç –±—É–¥–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü. ü§ñ\n\n–ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –∑–∞–ø–∏—Ç –±—É–¥—å-—è–∫ –∞–±–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º. üéôÔ∏è\n–ì–æ–ª–æ–≤–Ω–µ ‚Äî —Å–µ–Ω—Å, –∞ –®–Ü –ø–æ–∫—Ä–∞—â–∏—Ç—å –æ–ø–∏—Å –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É! üöÄ\n\n–£–¥–∞—á—ñ –≤–∞–º! üçÄ"},
        "no_generation" :
            {"eng": f"Your prompt will not be optimized!\n\nThe AI ‚Äã‚Äãfor image generation understands only English. ü§ñ\nDescribe everything in detail. ‚úçÔ∏è\nUse adjectives, style, lighting, angle.\n\nGood luck! üçÄ",
            "ru": f"–í–∞—à –ø—Ä–æ–º—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!\n\n–ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. ü§ñ\n–û–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ. ‚úçÔ∏è\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ, —Å—Ç–∏–ª—å, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ä–∞–∫—É—Ä—Å.\n\n–£–¥–∞—á–∏ –≤–∞–º! üçÄ",
            "ua": f"–í–∞—à –ø—Ä–æ–º—Ç –Ω–µ –±—É–¥–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π!\n\n–®–Ü –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ä–æ–∑—É–º—ñ—î –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É. ü§ñ\n–û–ø–∏—Å—É–π—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª—å–Ω–æ. ‚úçÔ∏è\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫–∏, —Å—Ç–∏–ª—å, –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, —Ä–∞–∫—É—Ä—Å.\n\n–£–¥–∞—á—ñ –≤–∞–º! üçÄ"}}
    db.update_ai_prompt_bool(callback_query.from_user.id, {'yes_generation' : True, 'no_generation' : False}[callback_query.data])
    await callback_query.message.edit_text(text_changes[language])
    await bot.send_message(chat_id=callback_query.from_user.id, text=text_language_dict[callback_query.data][language],reply_markup=builders.main_kb(language))



@router.callback_query(F.data == 'generation_settings')
async def process_callback_pagination(callback_query: CallbackQuery):
    language = db.get_language(callback_query.from_user.id)
    text_language_dict = {
        "eng": f"‚öôÔ∏è Optimize your prompt (query) to the image generator using AI?",
        "ru": f"‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–º—Ç (–∑–∞–ø—Ä–æ—Å) –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò?",
        "ua": f"‚öôÔ∏è –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∞—à –ø—Ä–æ–º—Ç (–∑–∞–ø–∏—Ç) –¥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü?"}

    await callback_query.message.answer(text_language_dict[language], reply_markup=inline.generate_button(language, '_generation'))

@router.callback_query(F.data == 'synthesis_settings')
async def process_callback_pagination(callback_query: CallbackQuery):
    language = db.get_language(callback_query.from_user.id)
    synthesis_data = db.get_synthesis_settings(callback_query.from_user.id)
    syntesis_language = await bot_func.get_language_name_by_code(synthesis_data["language_code"])
    voice_name = synthesis_data["voice_name"]
    pitch = synthesis_data["pitch"]
    speaking_rate = synthesis_data["speaking_rate"]
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> {syntesis_language}\n<b>Voice:</b> {voice_name}\n<b>Pitch:</b> {pitch}\n<b>Speaking rate:</b> {speaking_rate}\n\nChoose a language for the speech synthesizer üîä‚§µÔ∏è",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> {syntesis_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> {pitch}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> {speaking_rate}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ üîä‚§µÔ∏è",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> {syntesis_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> {pitch}\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> {speaking_rate}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è üîä‚§µÔ∏è"}

    await bot.send_message(chat_id=callback_query.from_user.id, text=text_language_dict[language],reply_markup=builders.create_language_keyboard(language))
    await callback_query.answer()


@router.callback_query(F.data == 'settings')
async def process_callback_pagination(callback_query: CallbackQuery):
    text_language_dict = {
        'ua': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—É ‚öôÔ∏è‚§µÔ∏è',
        'eng': 'Bot settings ‚öôÔ∏è‚§µÔ∏è',
        'ru': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚öôÔ∏è‚§µÔ∏è'
    }
    await callback_query.message.answer_photo(photo=FSInputFile('photo_2025-03-15_21-36-31.jpg'), text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=inline.settings_button(language=db.get_language(callback_query.from_user.id)))
    await callback_query.answer()



@router.callback_query(F.data == 'language_settings')
async def delete_user_data(callback_query: CallbackQuery):
    text_language_dict = {
        'ua': '–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–≤—É üìö',
        'eng': 'Choose new language üìö',
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫ üìö'
    }
    language = db.get_language(callback_query.from_user.id)
    kb = inline.language_button()
    await callback_query.message.answer(text_language_dict[language], reply_markup=kb)
    await callback_query.answer()


@router.callback_query(F.data == 'voice_language_settings')
async def process_callback_pagination(callback_query: CallbackQuery, state: FSMContext):
    text_language_dict = {
        "eng": "üéôÔ∏è Select the audio language for accurate transcription.",
        "ru": "üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
        "ua": "üéôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∞—É–¥—ñ–æ –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.",}
    language = db.get_language(callback_query.from_user.id)
    await callback_query.message.answer(text_language_dict[language], reply_markup=builders.create_language_keyboard(language, prefix='recognition'))
    await callback_query.answer()
    await state.set_state(VoiceRecognition.waiting_for_language)



@router.callback_query(lambda c: c.data.startswith('page_synthesis|'))
async def process_callback_pagination(callback_query: CallbackQuery):
    page = int(callback_query.data.split('|')[1])
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> Not selected\n<b>Voice:</b> Not selected\n<b>Pitch:</b> Not selected\n<b>Speaking rate:</b> Not selected\n\nChoose a language for the speech synthesizer üîä‚§µÔ∏è",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–ì–æ–ª–æ—Å:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ üîä‚§µÔ∏è",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–ì–æ–ª–æ—Å:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–æ\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è üîä‚§µÔ∏è"}

    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=builders.create_language_keyboard(language=db.get_language(callback_query.from_user.id), page=page, prefix = 'synthesis'))

@router.callback_query(lambda c: c.data.startswith('page_recognition|'))
async def process_callback_pagination(callback_query: CallbackQuery):
    page = int(callback_query.data.split('|')[1])
    text_language_dict = {
        "eng": "üéôÔ∏è Select the audio language for accurate transcription.",
        "ru": "üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
        "ua": "üéôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∞—É–¥—ñ–æ –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.",}
    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=builders.create_language_keyboard(language=db.get_language(callback_query.from_user.id), page=page, prefix='recognition'))

@router.callback_query(lambda c: c.data.startswith('lang_synthesis|'))
async def process_callback_language(callback_query: CallbackQuery):
    selected_language = callback_query.data.split('|')[1]
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> {selected_language}\n<b>Voice:</b> Not selected\n<b>Pitch:</b> Not selected\n<b>Speaking rate:</b> Not selected\n\nChoose a voice for the speech synthesizer üîä‚§µÔ∏è",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ üîä‚§µÔ∏è",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–æ\n\n–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è üîä‚§µÔ∏è"}
    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=builders.create_voice_keyboard(language_voices.get(selected_language)['voices']))

@router.callback_query(lambda c: c.data.startswith('voice|'))
async def process_callback_pagination(callback_query: CallbackQuery):
    callback_data = callback_query.data.split('|')
    language_code, voice_name = callback_data[1][:5], callback_data[1]
    selected_language = await bot_func.get_language_name_by_code(language_code)
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> {selected_language}\n<b>Voice:</b> {voice_name}\n<b>Pitch:</b> Not selected\n<b>Speaking rate:</b> Not selected\n\nChoose a voice for the speech synthesizer üîä‚§µÔ∏è",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ üîä‚§µÔ∏è",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–∏–π\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–æ\n\n–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è üîä‚§µÔ∏è"}
    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=inline.synthesis_pitch_button(db.get_language(callback_query.from_user.id), language_code, voice_name))

@router.callback_query(lambda c: c.data.startswith('pitch|'))
async def process_callback_pagination(callback_query: CallbackQuery):
    _, language_code, voice_name, pitch = callback_query.data.split('|')
    selected_language = await bot_func.get_language_name_by_code(language_code)
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> {selected_language}\n<b>Voice:</b> {voice_name}\n<b>Pitch:</b> {pitch}\n<b>Speaking rate:</b> Not selected\n\nChoose speaking rate for the speech synthesizer üîä‚§µÔ∏è",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> {pitch}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ üîä‚§µÔ∏è",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> {pitch}\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> –ù–µ –≤–∏–±—Ä–∞–Ω–æ\n\n–í–∏–±–µ—Ä—ñ—Ç—å —à–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è üîä‚§µÔ∏è"}

    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)],reply_markup=inline.synthesis_rate_button(db.get_language(callback_query.from_user.id), language_code, voice_name, pitch))

@router.callback_query(lambda c: c.data.startswith('rate|'))
async def process_callback_pagination(callback_query: CallbackQuery):
    _, language_code, voice_name, pitch, speaking_rate = callback_query.data.split('|')
    selected_language = await bot_func.get_language_name_by_code(language_code)
    db.update_synthesis_settings(callback_query.from_user.id, language_code, voice_name, pitch, speaking_rate)
    text_language_dict = {
        "eng": f"üéõ Speech synthesis settings:\n\n<b>Language:</b> {selected_language}\n<b>Voice:</b> {voice_name}\n<b>Pitch:</b> {pitch}\n<b>Speaking rate:</b> {speaking_rate}\n\nChanges applied successfully! üîä",
        "ru": f"üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:\n\n<b>–Ø–∑—ã–∫:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> {pitch}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> {speaking_rate}\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üîä",
        "ua": f"üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–≤–ª–µ–Ω–Ω—è:\n\n<b>–ú–æ–≤–∞:</b> {selected_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> {pitch}\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> {speaking_rate}\n\n–ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ! üîä"}

    await callback_query.message.edit_text(text=text_language_dict[db.get_language(callback_query.from_user.id)])




@router.callback_query(VoiceLanguageInGeneration.waiting_for_language_in_generation)
async def set_voice_language(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    new_language = language_voices[callback_query.data.split('|')[1]]["language_code"]
    language = db.get_language(user_id)
    text_language_dict = {
        "eng": f"Your audio language has been successfully saved!\n\n You can change it in your Profile settings üìã",
        "ru": f"–í–∞—à —è–∑—ã–∫ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n –ò–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ü—Ä–æ—Ñ–∏–ª—è üìã",
        "ua": f"–í–∞—à–∞ –º–æ–≤–∞ –∞—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!\n\n –ó–º—ñ–Ω–∏—Ç–∏ —ó—ó –º–æ–∂–Ω–∞ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ü—Ä–æ—Ñ—ñ–ª—é üìã"}
    await callback_query.message.edit_text(text=text_language_dict[language])
    if not db.get_voice_language(user_id): 
        data = await state.get_data()
        file_path = data.get("voice_path")
        prompt = await bot_func.audio_transcription(file_path, new_language)
        os.remove(file_path)
        if file_path:
            if db.get_ai_prompt_bool(user_id):
                prompt = await bot_func.prompt_ai_response(prompt)
            language_dict = {
                'ua': ['–û—Å—å –≤–∞—à –ø—Ä–æ–º—Ç ‚§µÔ∏è', '–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è?'],
                'eng': ['Here is your prompt ‚§µÔ∏è', 'Generate image?'],
                'ru': ['–í–æ—Ç –≤–∞—à –ø—Ä–æ–º—Ç ‚§µÔ∏è', '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?']}
            response = f"{language_dict[language][0]}\n\n<code>{prompt}</code>\n\n{language_dict[language][1]}"
            await bot.send_message(user_id, response, reply_markup=inline.generate_button(language))
            db.update_image_prompt(user_id, prompt)
    
    db.update_voice_language(user_id, new_language)
    await state.clear()


@router.callback_query(VoiceRecognition.waiting_for_language)
async def set_voice_language(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    new_language = language_voices[callback_query.data.split('|')[1]]["language_code"]
    language = db.get_language(user_id)
    text_language_dict = {
        "eng": f"Your audio language has been successfully saved!\n\n You can change it in your Profile settings üìã",
        "ru": f"–í–∞—à —è–∑—ã–∫ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n –ò–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ü—Ä–æ—Ñ–∏–ª—è üìã",
        "ua": f"–í–∞—à–∞ –º–æ–≤–∞ –∞—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!\n\n –ó–º—ñ–Ω–∏—Ç–∏ —ó—ó –º–æ–∂–Ω–∞ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ü—Ä–æ—Ñ—ñ–ª—é üìã"}
    await callback_query.message.edit_text(text=text_language_dict[language])
    if not db.get_voice_language(user_id): 
        data = await state.get_data()
        file_path = data.get("voice_path")
        if file_path:
            text_from_voice = await bot_func.audio_transcription(file_path, new_language) 
            data = db.get_history(user_id)
            data.append({"role": "user", "content": text_from_voice})
            ai_response = await bot_func.ai_response(data)
            await bot.send_message(chat_id=user_id, text= ai_response, reply_markup=builders.main_kb(language))

            db.update_history(user_id, {"role": "user", "content": text_from_voice}, {"role": "assistant", "content": ai_response})
            os.remove(file_path)
    
    db.update_voice_language(user_id, new_language)
    await state.clear()




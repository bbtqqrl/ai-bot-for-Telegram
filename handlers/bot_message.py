from aiogram import Router
import aiofiles, aiohttp, os
from aiogram import F, Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from data import bot_func
from pydub import AudioSegment
from data.db import Database
from keyboards import builders, inline
from main import bot
from data.bot_func import language_voices

router = Router()
db = Database()

class ImageGenState(StatesGroup):
    waiting_for_prompt = State() 

class SpeechSynthState(StatesGroup):
    waiting_for_synthesis_text = State() 

class VoiceRecognition(StatesGroup):
    waiting_for_language = State()

class VoiceLanguageInGeneration(StatesGroup):
    waiting_for_language_in_generation = State()

@router.message(F.text.in_(["–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –º–æ–≤–ª–µ–Ω–Ω—èüó£", "Speech synthesizerüó£", "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏üó£"]))
async def market_status(message: Message,  state: FSMContext):
    synthesis_data = db.get_synthesis_settings(message.chat.id)
    language = db.get_language(message.chat.id)
    syntesis_language = await bot_func.get_language_name_by_code(synthesis_data["language_code"])
    voice_name = synthesis_data["voice_name"]
    pitch = synthesis_data["pitch"]
    speaking_rate = synthesis_data["speaking_rate"]
    text_language_dict = {
        "eng": f"üîä This function allows you to synthesize speech in different languages, with various voices and pitch levels!\n\n<b>Synthesis settings can be changed in Profile.</b>\n\nüéõ Your current settings:\n<b>Language:</b> {syntesis_language}\n<b>Voice:</b> {voice_name}\n<b>Pitch:</b> {pitch}\n<b>Speaking rate:</b> {speaking_rate}\n\n‚úçÔ∏è Simply type the text you want to convert to speech in the chat!",
        "ru": f"üîä –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö, —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –∏ –≤—ã—Å–æ—Ç–æ–π —Ç–æ–Ω–∞!\n\n<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ü—Ä–æ—Ñ–∏–ª–µ.</b>\n\nüéõ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n<b>–Ø–∑—ã–∫:</b> {syntesis_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞:</b> {pitch}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:</b> {speaking_rate}\n\n‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ä–µ—á—å!",
        "ua": f"üîä –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å–∏–Ω—Ç–µ–∑—É–≤–∞—Ç–∏ –º–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏, –≥–æ–ª–æ—Å–∞–º–∏ —Ç–∞ –∑ —Ä–µ–≥—É–ª—å–æ–≤–∞–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é!\n\n<b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–µ–∑—É –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —É –ü—Ä–æ—Ñ—ñ–ª—ñ.</b>\n\nüéõ –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n<b>–ú–æ–≤–∞:</b> {syntesis_language}\n<b>–ì–æ–ª–æ—Å:</b> {voice_name}\n<b>–í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É:</b> {pitch}\n<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:</b> {speaking_rate}\n\n‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —É —á–∞—Ç —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ –º–æ–≤–ª–µ–Ω–Ω—è!"}

    await message.answer(text_language_dict[language])
    await state.set_state(SpeechSynthState.waiting_for_synthesis_text)


@router.message(F.text.in_(["–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—åüñº", "Image generationüñº", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–πüñº"]))
async def send_and_delete_image(message: Message, state: FSMContext):
    language_dict = {
    "ua": "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚úçÔ∏è‚§µÔ∏è\n\n–í–∞—à –∑–∞–ø–∏—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É, —â–æ–± –æ—Ç—Ä–∏–º–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–ª–æ —è–∫–æ–º–æ–≥–∞ —Ç–æ—á–Ω—ñ—à–∏–º —ñ —è–∫—ñ—Å–Ω—ñ—à–∏–º.\n\n–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ø—Ä–æ—Ñ—ñ–ª—é.",
    
    "eng": "Enter a text description for image generation ‚úçÔ∏è‚§µÔ∏è\n\nYour prompt will be automatically optimized using artificial intelligence to ensure the generated image is as accurate and high-quality as possible.\n\nIf you prefer, you can change this setting in your profile settings.",
    
    "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚úçÔ∏è‚§µÔ∏è\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ.\n\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è."}

    language_dict_false = {
    "ua": "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚úçÔ∏è‚§µÔ∏è\n\n–í–∞—à –∑–∞–ø–∏—Ç –Ω–µ –±—É–¥–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.\n\n–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ø—Ä–æ—Ñ—ñ–ª—é.",
    
    "eng": "Enter a text description for image generation ‚úçÔ∏è‚§µÔ∏è\n\nYour prompt will be not optimized using ai\n\nIf you prefer, you can change this setting in your profile settings.",
    
    "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚úçÔ∏è‚§µÔ∏è\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞\n\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è."}

    language = db.get_language(message.chat.id)
    prompt_bool = db.get_ai_prompt_bool(message.chat.id)
    if not prompt_bool:
        language_dict = language_dict_false
    await message.answer_photo(FSInputFile('photo_2025-03-16_18-37-24.jpg'), language_dict[language])
    await state.set_state(ImageGenState.waiting_for_prompt)

@router.message(F.text.in_(["–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ü§ñ", "Bot capabilitiesü§ñ", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ü§ñ"]))
async def market_status(message: Message, state: FSMContext):
    await state.clear()
    text_language_dict = {
        'ua': "<b>üîπ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>\n\nüß† <b>–í–µ–ª–∏–∫–∞ LLM-–º–æ–¥–µ–ª—å –∑ –ø–∞–º‚Äô—è—Ç—Ç—é</b> ‚Äì –±–æ—Ç –∞–Ω–∞–ª—ñ–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –¥–∞—î –æ—Å–º–∏—Å–ª–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.\n\nüéô <b>–ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> ‚Äì –º–æ–∂–µ—à –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –∑–∞–º—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É, –®–Ü —ó—Ö —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —Ç–∞ –ø–µ—Ä–µ–¥–∞—Å—Ç—å –≤ LLM.\n\nüñº <b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å</b> ‚Äì –±–æ—Ç —Å—Ç–≤–æ—Ä–∏—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ–≥–æ –æ–ø–∏—Å—É.\n\nüîä <b>–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –≥–æ–ª–æ—Å—É</b> ‚Äì –±–æ—Ç –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º —Ç–∞ –≤—Ä—É—á–Ω—É —Å–∏–Ω—Ç–µ–∑—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å, –∞ —Ç–∏ –º–æ–∂–µ—à –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ.\n\n‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b> –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –±–æ—Ç–∞, –º–æ–≤—É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å—É.\n\nüìñ <b>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ:</b> <a href='https://github.com/your_repo'>GitHub README</a>",
        'eng': "<b>üîπ Bot Features:</b>\n\nüß† <b>Powerful LLM model with memory</b> ‚Äì the bot understands context and gives meaningful responses.\n\nüéô <b>Voice messages</b> ‚Äì send voice instead of text, AI will recognize it and process it in the LLM.\n\nüñº <b>Image generation</b> ‚Äì create unique images based on your description.\n\nüîä <b>Voice synthesizer</b> ‚Äì the bot can respond with voice and manually synthesize voice, and you can customize its settings in your profile.\n\n‚öôÔ∏è <b>Settings:</b> change the bot's language, set the language for voice message analysis, and adjust voice synthesizer parameters.\n\nüìñ <b>More details:</b> <a href='https://github.com/your_repo'>GitHub README</a>",
        'ru': "<b>üîπ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\nüß† <b>–ú–æ—â–Ω–∞—è LLM-–º–æ–¥–µ–ª—å —Å –ø–∞–º—è—Ç—å—é</b> ‚Äì –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –¥–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\nüéô <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞, –ò–ò —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –≤ LLM.\n\nüñº <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> ‚Äì –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\nüîä <b>–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–∞</b> ‚Äì –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –∏ –≤—Ä—É—á–Ω—É—é —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å, –∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b> –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞, —è–∑—ã–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å–∞.\n\nüìñ <b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> <a href='https://github.com/your_repo'>GitHub README</a>"}
    await message.answer_photo(FSInputFile('photo_2025-03-15_19-35-44.jpg'), text_language_dict[db.get_language(message.chat.id)])

@router.message(F.text.in_(["–ù–æ–≤–∏–π —á–∞—Çüí¨", "New chatüí¨", "–ù–æ–≤—ã–π —á–∞—Çüí¨"]))
async def market_status(message: Message, state: FSMContext):
    await state.clear()
    text_language_dict = {
        'ua': '–ü—Ä–∏–≤—ñ—Ç , —á–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?',
        'eng': 'Hello, how can I help you?',
        'ru': '–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
    }
    db.delete_history(message.chat.id)
    await message.answer(text_language_dict[db.get_language(message.chat.id)])

@router.message(F.text.in_(["Profileüìã", "–ü—Ä–æ—Ñ—ñ–ª—åüìã", "–ü—Ä–æ—Ñ–∏–ª—åüìã"]))
async def market_status(message: Message, state: FSMContext):
    await state.clear()
    data = db.get_user_data(message.chat.id)
    language = db.get_language(message.chat.id)
    language_name = await bot_func.get_language_name_by_code(db.get_voice_language(message.chat.id))
    text_language_dict = {
        'ua': f'<b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å </b>üìã‚§µÔ∏è\n\nüÜî : <code>{message.chat.id}</code>\nüìç –Æ–∑–µ—Ä–Ω–µ–π–º : {message.from_user.first_name}\n\nüìù <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b> : {data[0]}\nüîâ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥—ñ–æ</b> : {data[1]}\nüé® <b>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å</b> : {data[2]}\n\nüåê <b>–ú–æ–≤–∞ –±–æ—Ç—É</b> : {language}\nüó£ <b>–ú–æ–≤–∞ –≤–∞—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å </b> : {language_name}',
        'eng': f'<b>Your Profile </b>üìã‚§µÔ∏è\n\nüÜî : <code>{message.chat.id}</code>\nüìç Username : {message.from_user.first_name}\n\nüìù <b>Messages sent</b> : {data[0]}\nüîâ <b>Voice messages sent</b> : {data[1]}\nüé® <b>Images generated</b> : {data[2]}\n\nüåê <b>Bot language</b>: {language}\nüó£ <b>Your voice message language</b>: {language_name}',
        'ru': f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å </b>üìã‚§µÔ∏è\n\nüÜî : <code>{message.chat.id}</code>\nüìç –Æ–∑–µ—Ä–Ω–µ–π–º : {message.from_user.first_name}\n\nüìù <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π</b> : {data[0]}\nüîâ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π</b> : {data[1]}\nüé® <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> : {data[2]}\n\nüåê <b>–Ø–∑—ã–∫ –±–æ—Ç–∞</b>: {language}\nüó£ <b>–Ø–∑—ã–∫ –≤–∞—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>: {language_name}'}

    await message.answer(text_language_dict[language], reply_markup=inline.profile_settings_button(language))


@router.message(F.text.in_(["About me!üòä", "–ü—Ä–æ –º–µ–Ω–µ!üòä", "–û–±–æ –º–Ω–µ!üòä"]))
async def market_status(message: Message, state: FSMContext):
    await state.clear()
    text_language_dict = {
        'ua': (
            f"<b>–ü—Ä–æ –º–µ–Ω–µ!</b>\n\n"
            f"–ü—Ä–∏–≤—ñ—Ç! –Ø <b>–ú–∞–∫—Å–∏–º –ì–æ—Ä–µ–ª—å—á–∏–∫</b>, 18-—Ä—ñ—á–Ω–∏–π Python-—Ä–æ–∑—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ä–æ–∑—É–º–Ω–∏—Ö —ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å. –Ø <b>–ª—é–±–ª—é</b> –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Ç–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏.\n\n"
            f"–Ø <b>–≤—ñ–¥–∫—Ä–∏—Ç–∏–π</b> –¥–æ –Ω–æ–≤–∏—Ö —ñ–¥–µ–π —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –±—É–¥—å —Ç–æ —Ü—ñ–∫–∞–≤–∏–π –ø—Ä–æ—î–∫—Ç, —Å–ø—ñ–≤–ø—Ä–∞—Ü—è —á–∏ —Ñ—Ä—ñ–ª–∞–Ω—Å. –Ø–∫—â–æ —É –≤–∞—Å —î —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ‚Äî<b>–∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é!</b> üöÄ\n\n"
            f"–¶–µ–π –±–æ—Ç –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π –Ω–∞ async <code><b>Python</b></code> —ñ <code><b>Aiogram</b></code>, —ñ–Ω—Ç–µ–≥—Ä—É—î <code><b>PostgreSQL</b></code> —Ç–∞ –æ—Ç—Ä–∏–º—É—î —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä—ñ–∑–Ω–∏—Ö <code><b>API</b></code>. –¶–µ –ª–∏—à–µ –æ–¥–∏–Ω —ñ–∑ –±–∞–≥–∞—Ç—å–æ—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤ —É –º–æ—î–º—É –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        ),
        'eng': (
            f"<b>About Me!</b>\n\n"
            f"Hi! I‚Äôm <b>Maksym Horelchyk</b>, an 18-year-old Python developer passionate about creating smart and efficient solutions. I <b>enjoy</b> tackling complex problems, optimizing processes, and continuously improving my skills.\n\n"
            f"I‚Äôm <b>always open</b> to new ideas and opportunities, whether it‚Äôs an interesting project, collaboration, or freelance work. If you have something exciting in mind‚Äî<b>let‚Äôs connect!</b> üöÄ\n\n"
            f"This bot is built with async <code><b>Python</b></code> and <code><b>Aiogram</b></code>, integrates <code><b>PostgreSQL</b></code>, and fetches real-time market data using various <code><b>APIs</b></code>. It‚Äôs just one of many projects in my growing portfolio.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        ),
        'ru': (
            f"<b>–û–±–æ –º–Ω–µ!</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç! –Ø <b>–ú–∞–∫—Å–∏–º –ì–æ—Ä–µ–ª—å—á–∏–∫</b>, 18-–ª–µ—Ç–Ω–∏–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —É–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–º–Ω—ã—Ö –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –Ø <b>–ª—é–±–ª—é</b> —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.\n\n"
            f"–Ø <b>–æ—Ç–∫—Ä—ã—Ç</b> –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –±—É–¥—å —Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ñ—Ä–∏–ª–∞–Ω—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚Äî<b>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!</b> üöÄ\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ async <code><b>Python</b></code> –∏ <code><b>Aiogram</b></code>, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç <code><b>PostgreSQL</b></code> –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö <code><b>API</b></code>. –≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        )
    }

    await message.answer(text_language_dict[db.get_language(message.chat.id)])

@router.message(SpeechSynthState.waiting_for_synthesis_text)
async def process_prompt(message: Message, state: FSMContext):
    settings_dict = db.get_synthesis_settings(message.chat.id)
    language, voice, pitch, speaking_rate = settings_dict["language_code"], settings_dict["voice_name"], settings_dict["pitch"], settings_dict["speaking_rate"]
    language_dict = {
        'ua': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ üìå...',
        'eng': 'Loading audio üìå...',
        'ru': '–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ üìå...'}
    await message.answer(language_dict[db.get_language(message.chat.id)])
    await state.clear()
    wav_path = await bot_func.speech_synthesis(message.text, language, voice, pitch, speaking_rate)
    if wav_path:
        try:
            await message.answer_document(FSInputFile(wav_path))
        except Exception as e:
            print(e)
        finally:
            os.remove(wav_path)
    else:
        await message.answer("Something get wrong...")


@router.message(ImageGenState.waiting_for_prompt)
async def process_prompt(message: Message, state: FSMContext):
    await state.clear()
    language = db.get_language(message.chat.id)
    language_dict = {
        'ua': ['–û—Å—å –≤–∞—à –ø—Ä–æ–º—Ç ‚§µÔ∏è', '–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è?'],
        'eng': ['Here is your prompt ‚§µÔ∏è', 'Generate image?'],
        'ru': ['–í–æ—Ç –≤–∞—à –ø—Ä–æ–º—Ç ‚§µÔ∏è', '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?']}
    if message.text:
        prompt = message.text
    elif message.voice:
        db.update_count_voice_message(message.chat.id)
        file = await bot.get_file(message.voice.file_id)
        file_path = f"{file.file_id}.ogg"
        await bot.download_file(file.file_path, file_path)
        voice_language = db.get_voice_language(message.chat.id)
        if voice_language:
            promt = await bot_func.audio_transcription(file_path, voice_language) # –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ —è–∫–∫ –º–æ–≤–∞ , —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ if elif db.get_VOICE LANGUAGE != none —ñ —Ç–¥
            os.remove(file_path)
        else:
            promt = None
            await state.update_data(voice_path=file_path)
            text_language_dict = {
                "eng": "üéôÔ∏è Select the audio language for accurate transcription.",
                "ru": "üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
                "ua": "üéôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∞—É–¥—ñ–æ –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.",}
            await message.answer(text_language_dict[language], reply_markup=builders.create_language_keyboard(language, prefix='recognition'))
            await state.set_state(VoiceLanguageInGeneration.waiting_for_language_in_generation)
    if promt:
        if db.get_ai_prompt_bool(message.chat.id):
            prompt = await bot_func.prompt_ai_response(promt)
        response = f"{language_dict[language][0]}\n\n<code>{prompt}</code>\n\n{language_dict[language][1]}"
        await message.answer(response, reply_markup=inline.generate_button(language))
        db.update_image_prompt(message.chat.id, prompt)


@router.message(F.voice)
async def handle_voice(message: Message, state: FSMContext):
    db.update_count_voice_message(message.chat.id)
    language = db.get_language(message.chat.id)
    file = await bot.get_file(message.voice.file_id)
    file_path = f"{file.file_id}.ogg"
    await bot.download_file(file.file_path, file_path)
    voice_language = db.get_voice_language(message.chat.id)
    if voice_language:
        text_from_voice = await bot_func.audio_transcription(file_path, voice_language) # –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ —è–∫–∫ –º–æ–≤–∞ , —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ if elif db.get_VOICE LANGUAGE != none —ñ —Ç–¥
        data = db.get_history(message.chat.id)
        data.append({"role": "user", "content": text_from_voice})
        ai_response = await bot_func.ai_response(data)
        await message.answer(ai_response, reply_markup=builders.main_kb(language))
        db.update_history(message.chat.id, {"role": "user", "content": text_from_voice}, {"role": "assistant", "content": ai_response})
        os.remove(file_path)
    else:
        await state.update_data(voice_path=file_path)
        text_language_dict = {
            "eng": "üéôÔ∏è Select the audio language for accurate transcription.",
            "ru": "üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
            "ua": "üéôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∞—É–¥—ñ–æ –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.",}

        await message.answer(text_language_dict[language], reply_markup=builders.create_language_keyboard(language, prefix='recognition'))
        await state.set_state(VoiceRecognition.waiting_for_language)


@router.message(F.text)
async def handle_crypto_request(message: Message):
    db.update_count_message(message.chat.id)
    data = db.get_history(message.chat.id)
    data.append({"role": "user", "content": message.text})
    ai_response = await bot_func.ai_response(data)
    kb = builders.main_kb(db.get_language(message.chat.id))
    await message.answer(ai_response, reply_markup=kb)
    db.update_history(message.chat.id, {"role": "user", "content": message.text}, {"role": "assistant", "content": ai_response})


